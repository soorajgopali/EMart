// <auto-generated />
using System;
using EMart.DA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EMart.DA.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240401103355_totalprice")]
    partial class totalprice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EMart.Models.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = 5,
                            Name = "New Balance"
                        },
                        new
                        {
                            Id = 6,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("EMart.Models.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EMart.Models.Models.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Editions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "World Cup"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Champions League"
                        },
                        new
                        {
                            Id = 3,
                            Name = "New Collection"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("EMart.Models.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamTypeId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("EMart.Models.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lionel Messi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cristiano Ronaldo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Neymar Jr"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kylian Mbappé"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Robert Lewandowski"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Kevin De Bruyne"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mohamed Salah"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sadio Mané"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sergio Ramos"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Luka Modrić"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Virgil van Dijk"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Harry Kane"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Antoine Griezmann"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Eden Hazard"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Raheem Sterling"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Manuel Neuer"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Trent Alexander-Arnold"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Marc-André ter Stegen"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Son Heung-min"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Alisson Becker"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Frenkie de Jong"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bernardo Silva"
                        },
                        new
                        {
                            Id = 23,
                            Name = "João Félix"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Paul Pogba"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Jan Oblak"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Sergio Agüero"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Bruno Fernandes"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Edinson Cavani"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Thiago Alcântara"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Timo Werner"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Romelu Lukaku"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Joshua Kimmich"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Jamie Vardy"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Vinícius Júnior"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Riyad Mahrez"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Thibaut Courtois"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Kalidou Koulibaly"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Jadon Sancho"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Ciro Immobile"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Miralem Pjanić"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Sergio Busquets"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Dries Mertens"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Gianluigi Donnarumma"
                        },
                        new
                        {
                            Id = 44,
                            Name = "N'Golo Kanté"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Andy Robertson"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Hakim Ziyech"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Angel Di Maria"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Alex Telles"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Marquinhos"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Gerard Piqué"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Keylor Navas"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Sergio Ramos"
                        },
                        new
                        {
                            Id = 54,
                            Name = "David Alaba"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Luis Suárez"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Marco Reus"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Fabinho"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Kai Havertz"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Angel Di Maria"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Edinson Cavani"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Lucas Hernández"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Memphis Depay"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Leroy Sané"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Kasper Schmeichel"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Koke"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Aymeric Laporte"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Nicolò Barella"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Matthijs de Ligt"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Rodrigo Bentancur"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Alejandro Gómez"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Raphael Varane"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Jude Bellingham"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Trent Alexander-Arnold"
                        },
                        new
                        {
                            Id = 74,
                            Name = "João Cancelo"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Dani Carvajal"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Casemiro"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Erling Haaland"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Jack Grealish"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Wojciech Szczęsny"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Ángel Correa"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Lorenzo Insigne"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Saul Niguez"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Allan Saint-Maximin"
                        },
                        new
                        {
                            Id = 84,
                            Name = "N'Golo Kanté"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Jorginho"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Timo Werner"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Ferran Torres"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Jamie Vardy"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Pierre-Emerick Aubameyang"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Karim Benzema"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Romelu Lukaku"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Jadon Sancho"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Gareth Bale"
                        },
                        new
                        {
                            Id = 94,
                            Name = "David de Gea"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Timo Werner"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Sadio Mané"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Raphaël Guerreiro"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Serge Gnabry"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Achraf Hakimi"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Yann Sommer"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Erling Haaland"
                        },
                        new
                        {
                            Id = 51,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("EMart.Models.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecificId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EditionId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SpecificId");

                    b.HasIndex("TeamId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EMart.Models.Models.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizesId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("EMart.Models.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("EMart.Models.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Sizes = "XS"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Sizes = "S"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Sizes = "M"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Sizes = "L"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Sizes = "XL"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Sizes = "2XL"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Sizes = "3XL"
                        });
                });

            modelBuilder.Entity("EMart.Models.Models.Specific", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specifics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vintage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Legend"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hero"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("EMart.Models.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EMart.Models.Models.TeamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Club"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Country"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EMart.Models.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("EMart.Models.Models.League", b =>
                {
                    b.HasOne("EMart.Models.Models.TeamType", "Type")
                        .WithMany()
                        .HasForeignKey("TeamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EMart.Models.Models.Product", b =>
                {
                    b.HasOne("EMart.Models.Models.Brand", "brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMart.Models.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMart.Models.Models.Edition", "edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMart.Models.Models.Player", "player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMart.Models.Models.Specific", "specific")
                        .WithMany()
                        .HasForeignKey("SpecificId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMart.Models.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("brand");

                    b.Navigation("category");

                    b.Navigation("edition");

                    b.Navigation("player");

                    b.Navigation("specific");

                    b.Navigation("team");
                });

            modelBuilder.Entity("EMart.Models.Models.ProductSize", b =>
                {
                    b.HasOne("EMart.Models.Models.Product", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMart.Models.Models.Product", "Sizes")
                        .WithMany()
                        .HasForeignKey("SizesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sizes");

                    b.Navigation("product");
                });

            modelBuilder.Entity("EMart.Models.Models.ShoppingCart", b =>
                {
                    b.HasOne("EMart.Models.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMart.Models.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EMart.Models.Models.Team", b =>
                {
                    b.HasOne("EMart.Models.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
